# generated by datamodel-codegen:
#   filename:  http://0.0.0.0:8000/api/v1/docs/openapi.json
#   timestamp: 2025-05-27T09:09:42+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any

from pydantic import BaseModel, EmailStr, Field, conint, constr


class AdminPasswordReset(BaseModel):
    new_password: str = Field(..., title='New Password')


class AgentBase(BaseModel):
    name: str = Field(..., title='Name')


class AgentRead(BaseModel):
    name: str = Field(..., title='Name')
    id: int = Field(..., title='Id')


class ChatState(BaseModel):
    last_agent: AgentRead | None = None
    input_list: list[dict[str, Any]] | None = Field(None, title='Input List')


class ContactRole(Enum):
    FARMER = 'farmer'
    EXTENSION_OFFICER = 'extension_officer'
    OTHER = 'other'


class CropVarietyResponse(BaseModel):
    variety: str = Field(..., title='Variety')
    description: str = Field(..., title='Description')
    max_yield: str = Field(..., title='Max Yield')


class ErrorMessage(BaseModel):
    msg: str = Field(..., title='Msg')


class ErrorResponse(BaseModel):
    detail: list[ErrorMessage] | None = Field(..., title='Detail')


class FarmContactRole(Enum):
    OWNER = 'owner'
    FAMILY = 'family'
    WORKER = 'worker'
    ADVISOR = 'advisor'


class FarmContactUpdate(BaseModel):
    role: FarmContactRole | None = Field(
        None, description='Updated role of the contact in the farm'
    )


class Gender(Enum):
    MALE = 'male'
    FEMALE = 'female'


class Location(BaseModel):
    latitude: float = Field(
        ..., description='Latitude in decimal degrees (-90 to 90)', title='Latitude'
    )
    longitude: float = Field(
        ..., description='Longitude in decimal degrees (-180 to 180)', title='Longitude'
    )


class ManufacturerRead(BaseModel):
    id: conint(lt=2147483647, gt=0) | None = Field(None, title='Id')
    name: str = Field(..., title='Name')


class ModelResponseCreate(BaseModel):
    response_id: str = Field(..., title='Response Id')
    output: Any = Field(..., title='Output')
    usage: dict[str, Any] | None = Field(None, title='Usage')


class NoteCreate(BaseModel):
    farm_id: int = Field(
        ..., description='ID of the farm where the note was made', title='Farm Id'
    )
    contact_id_created_by: conint(lt=2147483647, gt=0) | None = Field(
        ...,
        description='ID of the contact who created the note',
        title='Contact Id Created By',
    )
    note_text: str = Field(
        ..., description='Text content of the note', title='Note Text'
    )
    location: Location | None = Field(None, description='Location for the note')
    image_path: str | None = Field(
        None, description='Path to an image for the note', title='Image Path'
    )
    tags: str | None = Field(None, description='Tags for the note', title='Tags')


class NoteRead(BaseModel):
    farm_id: int = Field(
        ..., description='ID of the farm where the note was made', title='Farm Id'
    )
    contact_id_created_by: conint(lt=2147483647, gt=0) | None = Field(
        ...,
        description='ID of the contact who created the note',
        title='Contact Id Created By',
    )
    note_text: str = Field(
        ..., description='Text content of the note', title='Note Text'
    )
    location: Location | None = Field(None, description='Location for the note')
    image_path: str | None = Field(
        None, description='Path to an image for the note', title='Image Path'
    )
    tags: str | None = Field(None, description='Tags for the note', title='Tags')
    id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='Unique identifier of the note', title='Id'
    )


class NoteUpdate(BaseModel):
    field_id: int | None = Field(None, title='Field Id')
    farm_id: int | None = Field(None, title='Farm Id')
    planting_id: int | None = Field(None, title='Planting Id')
    note_date: date | None = Field(None, title='Note Date')
    note_text: str | None = Field(None, title='Note Text')
    location: Location | None = None
    image_path: str | None = Field(None, title='Image Path')
    tags: str | None = Field(None, title='Tags')


class OrganizationCreate(BaseModel):
    name: str = Field(..., title='Name')
    description: str | None = Field(None, title='Description')
    default: bool | None = Field(False, title='Default')


class OrganizationRead(BaseModel):
    name: str = Field(..., title='Name')
    description: str | None = Field(None, title='Description')
    default: bool | None = Field(False, title='Default')
    id: conint(lt=2147483647, gt=0) | None = Field(None, title='Id')
    slug: constr(pattern=r'^[\w]+(?:_[\w]+)*$', min_length=3) | None = Field(
        ..., title='Slug'
    )


class OrganizationUpdate(BaseModel):
    description: str | None = Field(None, title='Description')
    default: bool | None = Field(False, title='Default')


class ProductCategory(Enum):
    FUNGICIDE = 'Fungicide'
    INSECTICIDE = 'Insecticide'
    HERBICIDE = 'Herbicide'


class ProductCreate(BaseModel):
    category: ProductCategory
    name: str = Field(..., title='Name')
    price: float = Field(..., title='Price')
    description: str | None = Field(None, title='Description')


class ProductRead(BaseModel):
    category: ProductCategory
    name: str = Field(..., title='Name')
    price: float = Field(..., title='Price')
    description: str | None = Field(None, title='Description')
    id: conint(lt=2147483647, gt=0) | None = Field(None, title='Id')
    manufacturer: ManufacturerRead


class ProductUpdate(BaseModel):
    category: ProductCategory | None = None
    name: str | None = Field(None, title='Name')
    manufacturer_id: conint(lt=2147483647, gt=0) | None = Field(
        None, title='Manufacturer Id'
    )
    price: float | None = Field(None, title='Price')
    description: str | None = Field(None, title='Description')


class ProjectCreate(BaseModel):
    name: str = Field(..., title='Name')
    display_name: str | None = Field('', title='Display Name')
    description: str | None = Field(None, title='Description')
    default: bool = Field(False, title='Default')
    enabled: bool | None = Field(True, title='Enabled')
    organization: OrganizationRead


class ProjectRead(BaseModel):
    name: str = Field(..., title='Name')
    display_name: str | None = Field('', title='Display Name')
    description: str | None = Field(None, title='Description')
    default: bool = Field(False, title='Default')
    enabled: bool | None = Field(True, title='Enabled')
    id: conint(lt=2147483647, gt=0) | None = Field(None, title='Id')


class ProjectUpdate(BaseModel):
    name: str = Field(..., title='Name')
    display_name: str | None = Field('', title='Display Name')
    description: str | None = Field(None, title='Description')
    default: bool = Field(False, title='Default')
    enabled: bool | None = Field(True, title='Enabled')


class RunItemBase(BaseModel):
    type: str = Field(..., title='Type')
    agent_id: int | None = Field(None, title='Agent Id')
    raw_item: dict[str, Any] = Field(..., title='Raw Item')


class RunResultCreate(BaseModel):
    contact_id: int = Field(..., title='Contact Id')
    input: Any = Field(..., title='Input')
    created_at: datetime = Field(..., title='Created At')
    final_output: Any = Field(None, title='Final Output')
    input_guardrails: dict[str, Any] | None = Field(None, title='Input Guardrails')
    output_guardrails: dict[str, Any] | None = Field(None, title='Output Guardrails')
    last_agent: AgentBase | None = None
    input_list: list[dict[str, Any]] = Field(..., title='Input List')
    raw_responses: list[ModelResponseCreate] | None = Field(None, title='Raw Responses')
    new_items: list[RunItemBase] | None = Field(None, title='New Items')
    trace_id: str = Field(..., title='Trace Id')


class SuitabilityIndexResponse(BaseModel):
    suitability_index: dict[str, int] = Field(..., title='Suitability Index')


class UserOrganization(BaseModel):
    organization: OrganizationRead
    default: bool | None = Field(False, title='Default')
    role: str | None = Field(None, title='Role')


class UserPasswordUpdate(BaseModel):
    current_password: str = Field(..., title='Current Password')
    new_password: str = Field(..., title='New Password')


class UserProject(BaseModel):
    project: ProjectRead
    default: bool | None = Field(False, title='Default')
    role: str | None = Field(None, title='Role')


class UserRead(BaseModel):
    email: EmailStr = Field(..., title='Email')
    projects: list[UserProject] | None = Field([], title='Projects')
    organizations: list[UserOrganization] | None = Field([], title='Organizations')
    id: conint(lt=2147483647, gt=0) | None = Field(None, title='Id')
    role: str | None = Field(None, title='Role')


class UserRegister(BaseModel):
    email: EmailStr = Field(..., title='Email')
    projects: list[UserProject] | None = Field([], title='Projects')
    organizations: list[UserOrganization] | None = Field([], title='Organizations')
    password: str | None = Field(None, title='Password')


class UserRegisterResponse(BaseModel):
    token: str | None = Field(None, title='Token')


class UserUpdate(BaseModel):
    projects: list[UserProject] | None = Field(..., title='Projects')
    organizations: list[UserOrganization] | None = Field(..., title='Organizations')
    role: str | None = Field(None, title='Role')


class ValidationError(BaseModel):
    loc: list[str | int] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class ContactCreate(BaseModel):
    preferred_form_of_address: str | None = Field(
        None,
        description='Preferred form of address of the contact',
        title='Preferred Form Of Address',
    )
    gender: Gender | None = Field(None, description="Contact's gender")
    date_of_birth: date | None = Field(
        None, description="Contact's date of birth", title='Date Of Birth'
    )
    estimated_age: int | None = Field(
        None, description="Contact's estimated age", title='Estimated Age'
    )
    role: ContactRole | None = Field(None, description='Role of the contact')
    experience: int | None = Field(
        None, description="Contact's work experience in years", title='Experience'
    )
    email: str | None = Field(
        None, description="Contact's email address", title='Email'
    )
    name: str = Field(..., description='The whatsapp name of the contact', title='Name')
    phone_number: str = Field(
        ..., description="Contact's phone number", title='Phone Number'
    )


class ContactPatch(BaseModel):
    preferred_form_of_address: str | None = Field(
        None,
        description='Preferred form of address of the contact',
        title='Preferred Form Of Address',
    )
    gender: Gender | None = Field(None, description="Contact's gender")
    date_of_birth: date | None = Field(
        None, description="Contact's date of birth", title='Date Of Birth'
    )
    estimated_age: int | None = Field(
        None, description="Contact's estimated age", title='Estimated Age'
    )
    role: ContactRole | None = Field(None, description='Role of the contact')
    experience: int | None = Field(
        None, description="Contact's work experience in years", title='Experience'
    )
    email: str | None = Field(
        None, description="Contact's email address", title='Email'
    )
    name: str | None = Field(
        None, description='Updated name of the contact', title='Name'
    )


class CropVarietiesResponse(BaseModel):
    crop: str = Field(..., title='Crop')
    varieties: list[CropVarietyResponse] = Field(..., title='Varieties')


class FarmContactCreate(BaseModel):
    farm_id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='ID of the farm', title='Farm Id'
    )
    contact_id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='ID of the contact', title='Contact Id'
    )
    role: FarmContactRole = Field(..., description='Role of the contact in the farm')


class FarmContactLink(BaseModel):
    contact_id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='ID of the contact to link', title='Contact Id'
    )
    role: FarmContactRole = Field(..., description='Role of the contact in the farm')


class FarmCreate(BaseModel):
    farm_name: str = Field(..., description='The name of the farm', title='Farm Name')
    location: Location | None = Field(None, description='Location of the farm')
    contacts: list[FarmContactLink] | None = Field(
        None,
        description='List of contacts to link to the farm upon creation',
        title='Contacts',
    )


class FarmRead(BaseModel):
    farm_name: str = Field(..., description='The name of the farm', title='Farm Name')
    location: Location | None = Field(None, description='Location of the farm')
    id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='Unique identifier of the farm', title='Id'
    )


class FarmSummary(BaseModel):
    farm_name: str = Field(..., description='The name of the farm', title='Farm Name')
    location: Location | None = Field(None, description='Location of the farm')
    id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='Unique identifier of the farm', title='Id'
    )
    role: FarmContactRole = Field(..., description="Contact's role on the farm")


class FarmUpdate(BaseModel):
    farm_name: str | None = Field(
        None, description='Updated name of the farm', title='Farm Name'
    )
    location: Location | None = Field(None, description='Updated location of the farm')


class HTTPValidationError(BaseModel):
    detail: list[ValidationError] | None = Field(None, title='Detail')


class NotePagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[NoteRead] | None = Field(
        None, description='List of notes in the current page', title='Items'
    )


class OrganizationPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[OrganizationRead] = Field([], title='Items')


class ProductPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[ProductRead] = Field([], title='Items')


class ProjectPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[ProjectRead] = Field([], title='Items')


class UserCreate(BaseModel):
    email: EmailStr = Field(..., title='Email')
    password: str | None = Field(None, title='Password')
    projects: list[UserProject] | None = Field(..., title='Projects')
    organizations: list[UserOrganization] | None = Field(..., title='Organizations')
    role: str | None = Field(None, title='Role')


class UserLogin(BaseModel):
    email: EmailStr = Field(..., title='Email')
    projects: list[UserProject] | None = Field([], title='Projects')
    organizations: list[UserOrganization] | None = Field([], title='Organizations')
    password: str = Field(..., title='Password')


class UserLoginResponse(BaseModel):
    projects: list[UserProject] | None = Field(..., title='Projects')
    token: str | None = Field(None, title='Token')


class UserPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[UserRead] = Field([], title='Items')


class ContactRead(BaseModel):
    preferred_form_of_address: str | None = Field(
        None,
        description='Preferred form of address of the contact',
        title='Preferred Form Of Address',
    )
    gender: Gender | None = Field(None, description="Contact's gender")
    date_of_birth: date | None = Field(
        None, description="Contact's date of birth", title='Date Of Birth'
    )
    estimated_age: int | None = Field(
        None, description="Contact's estimated age", title='Estimated Age'
    )
    role: ContactRole | None = Field(None, description='Role of the contact')
    experience: int | None = Field(
        None, description="Contact's work experience in years", title='Experience'
    )
    email: str | None = Field(
        None, description="Contact's email address", title='Email'
    )
    id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='Unique identifier of the contact', title='Id'
    )
    name: str = Field(..., description='The WhatsApp name of the contact', title='Name')
    phone_number: str = Field(
        ..., description="Contact's phone number", title='Phone Number'
    )
    organization: OrganizationRead = Field(
        ..., description='The organization the contact belongs to'
    )
    farms: list[FarmSummary] | None = Field(
        None, description='List of farms associated with the contact', title='Farms'
    )


class FarmContactRead(BaseModel):
    farm_id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='ID of the farm', title='Farm Id'
    )
    contact_id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='ID of the contact', title='Contact Id'
    )
    role: FarmContactRole = Field(..., description='Role of the contact in the farm')
    id: conint(lt=2147483647, gt=0) | None = Field(
        None,
        description='Unique identifier of the farm contact association',
        title='Id',
    )
    contact: ContactRead = Field(..., description='Contact details')


class FarmPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[FarmRead] | None = Field(
        None, description='List of farms in the current page', title='Items'
    )


class ContactPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[ContactRead] | None = Field(
        None, description='List of contacts in the current page', title='Items'
    )


class FarmContactPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[FarmContactRead] | None = Field(
        None, description='List of farm contacts in the current page', title='Items'
    )

def to_dict(self):
    return self.model_dump(mode='json')

BaseModel.to_dict = to_dict

