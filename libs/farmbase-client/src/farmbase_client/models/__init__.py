# generated by datamodel-codegen:
#   filename:  http://0.0.0.0:8000/api/v1/docs/openapi.json
#   timestamp: 2025-06-24T07:47:47+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any

from pydantic import BaseModel, Field, conint, constr


class AgentBase(BaseModel):
    name: str = Field(..., title='Name')


class AgentRead(BaseModel):
    name: str = Field(..., title='Name')
    id: int = Field(..., title='Id')


class ChatState(BaseModel):
    last_agent: AgentRead | None = None
    messages: list[dict[str, Any]] | None = Field(None, title='Messages')


class ContactRole(Enum):
    FARMER = 'farmer'
    EXTENSION_OFFICER = 'extension_officer'
    OTHER = 'other'


class CropCycleCreate(BaseModel):
    crop_id: str = Field(..., description='Associated crop ID', title='Crop Id')
    name: str = Field(..., description='Cycle name', title='Name')
    description: str | None = Field(
        None, description='Cycle description', title='Description'
    )
    total_duration_days: int | None = Field(
        None, description='Total cycle duration', title='Total Duration Days'
    )
    cultivation_method: str | None = Field(
        None, description='Cultivation method', title='Cultivation Method'
    )


class CropStageRead(BaseModel):
    stage_id: int | None = Field(
        None, description='Original stage ID', title='Stage Id'
    )
    name: str = Field(..., description='Stage name', title='Name')
    duration_days: int = Field(
        ..., description='Stage duration in days', title='Duration Days'
    )
    sequence_order: int = Field(
        ..., description='Order in the cycle', title='Sequence Order'
    )
    description: str | None = Field(
        None, description='Stage description', title='Description'
    )
    id: conint(lt=2147483647, gt=0) | None = Field(None, title='Id')
    cycle_id: int = Field(..., title='Cycle Id')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class CropVarietyResponse(BaseModel):
    variety: str = Field(..., title='Variety')
    producer: str = Field(..., title='Producer')
    description: str = Field(..., title='Description')
    maturity_months: str = Field(..., title='Maturity Months')
    yield_tons_ha: str = Field(..., title='Yield Tons Ha')
    min_altitude_masl: float = Field(..., title='Min Altitude Masl')
    max_altitude_masl: float = Field(..., title='Max Altitude Masl')
    maturity_category: str = Field(..., title='Maturity Category')


class CultivationType(Enum):
    DIRECT_SEEDING = 'direct_seeding'
    TRANSPLANTED = 'transplanted'


class ErrorMessage(BaseModel):
    msg: str = Field(..., title='Msg')


class ErrorResponse(BaseModel):
    detail: list[ErrorMessage] | None = Field(..., title='Detail')


class EventCategory(Enum):
    FERTILIZATION_CONVENTIONAL = 'fertilization_conventional'
    FERTILIZATION_ORGANIC = 'fertilization_organic'
    FIELD_PREPARATION = 'field_preparation'
    SITE_SELECTION = 'site_selection'
    PLANTING = 'planting'
    PLANT_SELECTION = 'plant_selection'
    IRRIGATION = 'irrigation'
    WEEDING = 'weeding'
    MONITORING = 'monitoring'
    PLANT_TRAINING = 'plant_training'
    PREVENTIVE_MEASURES = 'preventive_measures'
    CHEMICAL_PLANT_PROTECTION = 'chemical_plant_protection'
    BIOLOGICAL_PLANT_PROTECTION = 'biological_plant_protection'
    HARVESTING = 'harvesting'
    POST_HARVEST = 'post_harvest'
    AWARENESS = 'awareness'
    BOARDING = 'boarding'


class EventType(Enum):
    ADVICE = 'advice'
    HINT = 'hint'


class EventUpdate(BaseModel):
    identifier: str | None = Field(None, title='Identifier')
    title: str | None = Field(None, title='Title')
    description: str | None = Field(None, title='Description')
    nutshell: str | None = Field(None, title='Nutshell')
    event_category: EventCategory | None = None
    event_type: EventType | None = None
    importance: int | None = Field(None, title='Importance')
    start_day: int | None = Field(None, title='Start Day')
    end_day: int | None = Field(None, title='End Day')
    video_url: str | None = Field(None, title='Video Url')
    translated: bool | None = Field(None, title='Translated')
    image_list: dict[str, Any] | None = Field(None, title='Image List')
    params: list[dict[str, Any]] | None = Field(None, title='Params')
    farm_assets: list[str] | None = Field(None, title='Farm Assets')
    farm_classes: list[str] | None = Field(None, title='Farm Classes')
    farm_soils: list[str] | None = Field(None, title='Farm Soils')
    farmer_experiences: list[str] | None = Field(None, title='Farmer Experiences')
    farmer_groups: list[str] | None = Field(None, title='Farmer Groups')
    weather_limitations: list[str] | None = Field(None, title='Weather Limitations')


class FarmContactRole(Enum):
    OWNER = 'owner'
    FAMILY = 'family'
    WORKER = 'worker'
    ADVISOR = 'advisor'


class FarmContactUpdate(BaseModel):
    role: FarmContactRole | None = Field(
        None, description='Updated role of the contact in the farm'
    )


class Gender(Enum):
    MALE = 'male'
    FEMALE = 'female'
    CASTRATE = 'castrate'


class GrowthStage(Enum):
    SEEDLING = 'seedling'
    VEGETATIVE = 'vegetative'
    FLOWERING = 'flowering'
    FRUITING = 'fruiting'
    HARVESTING = 'harvesting'


class LaborLevel(Enum):
    LOW = 'low'
    INTERMEDIATE = 'intermediate'
    HIGH = 'high'


class Location(BaseModel):
    latitude: float = Field(
        ..., description='Latitude in decimal degrees (-90 to 90)', title='Latitude'
    )
    longitude: float = Field(
        ..., description='Longitude in decimal degrees (-180 to 180)', title='Longitude'
    )


class ManufacturerRead(BaseModel):
    id: conint(lt=2147483647, gt=0) | None = Field(None, title='Id')
    name: str = Field(..., title='Name')


class MarketCreate(BaseModel):
    name: str = Field(..., description='Name of the market', title='Name')


class MarketRead(BaseModel):
    name: str = Field(..., description='Name of the market', title='Name')
    id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='Unique identifier of the market', title='Id'
    )


class MarketUpdate(BaseModel):
    name: str | None = Field(None, description='Name of the market', title='Name')


class ModelResponseCreate(BaseModel):
    response_id: str = Field(..., title='Response Id')
    output: Any = Field(..., title='Output')
    usage: dict[str, Any] | None = Field(None, title='Usage')


class NoteCreate(BaseModel):
    farm_id: int = Field(
        ..., description='ID of the farm where the note was made', title='Farm Id'
    )
    contact_id_created_by: conint(lt=2147483647, gt=0) | None = Field(
        ...,
        description='ID of the contact who created the note',
        title='Contact Id Created By',
    )
    note_text: str = Field(
        ..., description='Text content of the note', title='Note Text'
    )
    location: Location | None = Field(None, description='Location for the note')
    image_path: str | None = Field(
        None, description='Path to an image for the note', title='Image Path'
    )
    tags: str | None = Field(None, description='Tags for the note', title='Tags')


class NoteRead(BaseModel):
    farm_id: int = Field(
        ..., description='ID of the farm where the note was made', title='Farm Id'
    )
    contact_id_created_by: conint(lt=2147483647, gt=0) | None = Field(
        ...,
        description='ID of the contact who created the note',
        title='Contact Id Created By',
    )
    note_text: str = Field(
        ..., description='Text content of the note', title='Note Text'
    )
    location: Location | None = Field(None, description='Location for the note')
    image_path: str | None = Field(
        None, description='Path to an image for the note', title='Image Path'
    )
    tags: str | None = Field(None, description='Tags for the note', title='Tags')
    id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='Unique identifier of the note', title='Id'
    )


class NoteUpdate(BaseModel):
    field_id: int | None = Field(None, title='Field Id')
    farm_id: int | None = Field(None, title='Farm Id')
    planting_id: int | None = Field(None, title='Planting Id')
    note_date: date | None = Field(None, title='Note Date')
    note_text: str | None = Field(None, title='Note Text')
    location: Location | None = None
    image_path: str | None = Field(None, title='Image Path')
    tags: str | None = Field(None, title='Tags')


class OrganizationRead(BaseModel):
    name: str = Field(..., title='Name')
    description: str | None = Field(None, title='Description')
    default: bool | None = Field(False, title='Default')
    id: conint(lt=2147483647, gt=0) | None = Field(None, title='Id')
    slug: constr(pattern=r'^[\w]+(?:_[\w]+)*$', min_length=3) | None = Field(
        ..., title='Slug'
    )


class PathogenClass(Enum):
    FUNGI = 'fungi'
    BACTERIA = 'bacteria'
    VIRUS = 'virus'
    INSECT = 'insect'
    MITE = 'mite'
    DEFICIENCY = 'deficiency'
    WEED = 'weed'
    OTHERS = 'others'
    ADDITIONAL = 'additional'


class PathogenImageRead(BaseModel):
    file_name: str = Field(..., description='Image file name', title='File Name')
    url: str | None = Field(None, description='Image URL', title='Url')
    caption: str | None = Field(None, description='Image caption', title='Caption')
    is_default: bool = Field(
        False, description='Is this the default image', title='Is Default'
    )
    id: conint(lt=2147483647, gt=0) | None = Field(None, title='Id')
    pathogen_id: int = Field(..., title='Pathogen Id')


class ProductCategory(Enum):
    FUNGICIDE = 'Fungicide'
    INSECTICIDE = 'Insecticide'
    HERBICIDE = 'Herbicide'


class ProductCreate(BaseModel):
    category: ProductCategory
    name: str = Field(..., title='Name')
    price: float = Field(..., title='Price')
    description: str | None = Field(None, title='Description')


class ProductInterests(BaseModel):
    crops: list[str] = Field(..., title='Crops')
    livestock: list[str] = Field(..., title='Livestock')
    other: list[str] = Field(..., title='Other')


class ProductRead(BaseModel):
    category: ProductCategory
    name: str = Field(..., title='Name')
    price: float = Field(..., title='Price')
    description: str | None = Field(None, title='Description')
    id: conint(lt=2147483647, gt=0) | None = Field(None, title='Id')
    manufacturer: ManufacturerRead


class ProductUpdate(BaseModel):
    category: ProductCategory | None = None
    name: str | None = Field(None, title='Name')
    manufacturer_id: conint(lt=2147483647, gt=0) | None = Field(
        None, title='Manufacturer Id'
    )
    price: float | None = Field(None, title='Price')
    description: str | None = Field(None, title='Description')


class RunItemBase(BaseModel):
    type: str = Field(..., title='Type')
    agent_id: int | None = Field(None, title='Agent Id')
    raw_item: dict[str, Any] = Field(..., title='Raw Item')


class RunResultCreate(BaseModel):
    contact_id: int = Field(..., title='Contact Id')
    input: Any = Field(..., title='Input')
    created_at: datetime = Field(..., title='Created At')
    final_output: Any = Field(None, title='Final Output')
    input_guardrails: dict[str, Any] | None = Field(None, title='Input Guardrails')
    output_guardrails: dict[str, Any] | None = Field(None, title='Output Guardrails')
    last_agent: AgentBase | None = None
    input_list: list[dict[str, Any]] = Field(..., title='Input List')
    raw_responses: list[ModelResponseCreate] | None = Field(None, title='Raw Responses')
    new_items: list[RunItemBase] | None = Field(None, title='New Items')
    trace_id: str = Field(..., title='Trace Id')


class SearchFilters(BaseModel):
    crop_id: str | None = Field(None, description='Filter by crop ID', title='Crop Id')
    pathogen_class: PathogenClass | None = Field(
        None, description='Filter by pathogen class'
    )
    event_category: EventCategory | None = Field(
        None, description='Filter by event category'
    )
    severity: int | None = Field(
        None, description='Filter by pathogen severity', title='Severity'
    )
    growth_stage: GrowthStage | None = Field(None, description='Filter by growth stage')


class SpreadRisk(Enum):
    LOW = 'Low'
    INTERMEDIATE = 'Intermediate'
    HIGH = 'High'


class SuitabilityIndexResponse(BaseModel):
    suitability_index: dict[str, int] = Field(..., title='Suitability Index')


class ValidationError(BaseModel):
    loc: list[str | int] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class WateringLevel(Enum):
    LOW = 'low'
    INTERMEDIATE = 'intermediate'
    HIGH = 'high'


class BodyAgronomyCreateNewCropCycle(BaseModel):
    cycle_data: CropCycleCreate
    stages_data: list[dict[str, Any]] = Field([], title='Stages Data')


class CommodityCreate(BaseModel):
    name: str = Field(..., description='Name of the commodity', title='Name')
    classification: str | None = Field(
        None,
        description='Classification or category of the commodity',
        title='Classification',
    )
    grade: str | None = Field(
        None, description='Grade or quality level of the commodity', title='Grade'
    )
    sex: Gender | None = Field(
        None, description='Sex specification for livestock commodities'
    )


class CommodityRead(BaseModel):
    name: str = Field(..., description='Name of the commodity', title='Name')
    classification: str | None = Field(
        None,
        description='Classification or category of the commodity',
        title='Classification',
    )
    grade: str | None = Field(
        None, description='Grade or quality level of the commodity', title='Grade'
    )
    sex: Gender | None = Field(
        None, description='Sex specification for livestock commodities'
    )
    id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='Unique identifier of the commodity', title='Id'
    )


class CommodityUpdate(BaseModel):
    name: str | None = Field(None, description='Name of the commodity', title='Name')
    classification: str | None = Field(
        None,
        description='Classification or category of the commodity',
        title='Classification',
    )
    grade: str | None = Field(
        None, description='Grade or quality level of the commodity', title='Grade'
    )
    sex: Gender | None = Field(
        None, description='Sex specification for livestock commodities'
    )


class ContactCreate(BaseModel):
    preferred_form_of_address: str | None = Field(
        None,
        description='Preferred form of address of the contact',
        title='Preferred Form Of Address',
    )
    gender: Gender | None = Field(None, description="Contact's gender")
    date_of_birth: date | None = Field(
        None, description="Contact's date of birth", title='Date Of Birth'
    )
    estimated_age: int | None = Field(
        None, description="Contact's estimated age", title='Estimated Age'
    )
    role: ContactRole | None = Field(None, description='Role of the contact')
    experience: int | None = Field(
        None, description="Contact's work experience in years", title='Experience'
    )
    email: str | None = Field(
        None, description="Contact's email address", title='Email'
    )
    product_interests: ProductInterests | None = Field(
        None,
        description='The crops, livestock and other farm products that the contact is interested in',
    )
    name: str = Field(..., description='The whatsapp name of the contact', title='Name')
    phone_number: str = Field(
        ..., description="Contact's phone number", title='Phone Number'
    )


class ContactPatch(BaseModel):
    preferred_form_of_address: str | None = Field(
        None,
        description='Preferred form of address of the contact',
        title='Preferred Form Of Address',
    )
    gender: Gender | None = Field(None, description="Contact's gender")
    date_of_birth: date | None = Field(
        None, description="Contact's date of birth", title='Date Of Birth'
    )
    estimated_age: int | None = Field(
        None, description="Contact's estimated age", title='Estimated Age'
    )
    role: ContactRole | None = Field(None, description='Role of the contact')
    experience: int | None = Field(
        None, description="Contact's work experience in years", title='Experience'
    )
    email: str | None = Field(
        None, description="Contact's email address", title='Email'
    )
    product_interests: ProductInterests | None = Field(
        None,
        description='The crops, livestock and other farm products that the contact is interested in',
    )
    name: str | None = Field(
        None, description='Updated name of the contact', title='Name'
    )


class ContactSummary(BaseModel):
    id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='Unique identifier of the contact', title='Id'
    )
    name: str = Field(..., description='Name of the contact', title='Name')
    role: FarmContactRole = Field(
        ..., description='Role of the contact in the farm', title='Role'
    )


class CropCreate(BaseModel):
    host_id: str = Field(..., description='Unique crop identifier', title='Host Id')
    crop_cycle_length_min: int = Field(
        ...,
        description='Minimum crop cycle length in days',
        title='Crop Cycle Length Min',
    )
    crop_cycle_length_max: int = Field(
        ...,
        description='Maximum crop cycle length in days',
        title='Crop Cycle Length Max',
    )
    cultivation_type: CultivationType = Field(..., description='Cultivation method')
    description: str | None = Field(
        None, description='Crop description', title='Description'
    )
    labor: LaborLevel = Field(..., description='Labor requirement level')
    watering: WateringLevel = Field(..., description='Watering requirement level')
    n_opt: int = Field(
        ..., description='Optimal nitrogen requirement (kg/ha)', title='N Opt'
    )
    p_opt: int = Field(
        ..., description='Optimal phosphorus requirement (kg/ha)', title='P Opt'
    )
    k_opt: int = Field(
        ..., description='Optimal potassium requirement (kg/ha)', title='K Opt'
    )
    ph_from: float = Field(..., description='Minimum pH requirement', title='Ph From')
    ph_to: float = Field(..., description='Maximum pH requirement', title='Ph To')
    soil_description: str | None = Field(
        None, description='Soil description', title='Soil Description'
    )
    temp_day_growth_from: int = Field(
        ...,
        description='Minimum growing temperature (°C)',
        title='Temp Day Growth From',
    )
    temp_day_growth_to: int = Field(
        ..., description='Maximum growing temperature (°C)', title='Temp Day Growth To'
    )


class CropCycleRead(BaseModel):
    crop_id: str = Field(..., description='Associated crop ID', title='Crop Id')
    name: str = Field(..., description='Cycle name', title='Name')
    description: str | None = Field(
        None, description='Cycle description', title='Description'
    )
    total_duration_days: int | None = Field(
        None, description='Total cycle duration', title='Total Duration Days'
    )
    cultivation_method: str | None = Field(
        None, description='Cultivation method', title='Cultivation Method'
    )
    id: conint(lt=2147483647, gt=0) | None = Field(None, title='Id')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')
    stages: list[CropStageRead] | None = Field(None, title='Stages')


class CropRead(BaseModel):
    host_id: str = Field(..., description='Unique crop identifier', title='Host Id')
    crop_cycle_length_min: int = Field(
        ...,
        description='Minimum crop cycle length in days',
        title='Crop Cycle Length Min',
    )
    crop_cycle_length_max: int = Field(
        ...,
        description='Maximum crop cycle length in days',
        title='Crop Cycle Length Max',
    )
    cultivation_type: CultivationType = Field(..., description='Cultivation method')
    description: str | None = Field(
        None, description='Crop description', title='Description'
    )
    labor: LaborLevel = Field(..., description='Labor requirement level')
    watering: WateringLevel = Field(..., description='Watering requirement level')
    n_opt: int = Field(
        ..., description='Optimal nitrogen requirement (kg/ha)', title='N Opt'
    )
    p_opt: int = Field(
        ..., description='Optimal phosphorus requirement (kg/ha)', title='P Opt'
    )
    k_opt: int = Field(
        ..., description='Optimal potassium requirement (kg/ha)', title='K Opt'
    )
    ph_from: float = Field(..., description='Minimum pH requirement', title='Ph From')
    ph_to: float = Field(..., description='Maximum pH requirement', title='Ph To')
    soil_description: str | None = Field(
        None, description='Soil description', title='Soil Description'
    )
    temp_day_growth_from: int = Field(
        ...,
        description='Minimum growing temperature (°C)',
        title='Temp Day Growth From',
    )
    temp_day_growth_to: int = Field(
        ..., description='Maximum growing temperature (°C)', title='Temp Day Growth To'
    )
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class CropUpdate(BaseModel):
    crop_cycle_length_min: int | None = Field(None, title='Crop Cycle Length Min')
    crop_cycle_length_max: int | None = Field(None, title='Crop Cycle Length Max')
    cultivation_type: CultivationType | None = None
    description: str | None = Field(None, title='Description')
    labor: LaborLevel | None = None
    watering: WateringLevel | None = None
    n_opt: int | None = Field(None, title='N Opt')
    p_opt: int | None = Field(None, title='P Opt')
    k_opt: int | None = Field(None, title='K Opt')
    ph_from: float | None = Field(None, title='Ph From')
    ph_to: float | None = Field(None, title='Ph To')
    soil_description: str | None = Field(None, title='Soil Description')
    temp_day_growth_from: int | None = Field(None, title='Temp Day Growth From')
    temp_day_growth_to: int | None = Field(None, title='Temp Day Growth To')


class CropVarietiesResponse(BaseModel):
    crop: str = Field(..., title='Crop')
    varieties: list[CropVarietyResponse] = Field(..., title='Varieties')


class EventCreate(BaseModel):
    identifier: str = Field(
        ..., description='Unique event identifier', title='Identifier'
    )
    title: str = Field(..., description='Event title', title='Title')
    description: str | None = Field(
        None, description='Event description', title='Description'
    )
    nutshell: str | None = Field(None, description='Brief summary', title='Nutshell')
    event_category: EventCategory = Field(..., description='Event category')
    event_type: EventType = Field(..., description='Event type')
    importance: int | None = Field(
        None, description='Importance level (1-4)', title='Importance'
    )
    start_day: int | None = Field(
        None, description='Start day from planting', title='Start Day'
    )
    end_day: int | None = Field(
        None, description='End day from planting', title='End Day'
    )
    video_url: str | None = Field(None, description='Video URL', title='Video Url')
    translated: bool = Field(
        False, description='Is content translated', title='Translated'
    )
    image_list: dict[str, Any] | None = Field(
        None, description='Image information', title='Image List'
    )
    params: list[dict[str, Any]] | None = Field(
        None, description='Event parameters', title='Params'
    )
    farm_assets: list[str] | None = Field(
        None, description='Required farm assets', title='Farm Assets'
    )
    farm_classes: list[str] | None = Field(
        None, description='Farm classifications', title='Farm Classes'
    )
    farm_soils: list[str] | None = Field(
        None, description='Suitable soil types', title='Farm Soils'
    )
    farmer_experiences: list[str] | None = Field(
        None, description='Required farmer experience', title='Farmer Experiences'
    )
    farmer_groups: list[str] | None = Field(
        None, description='Target farmer groups', title='Farmer Groups'
    )
    weather_limitations: list[str] | None = Field(
        None, description='Weather limitations', title='Weather Limitations'
    )
    id: str = Field(..., description='Event ID', title='Id')


class EventRead(BaseModel):
    identifier: str = Field(
        ..., description='Unique event identifier', title='Identifier'
    )
    title: str = Field(..., description='Event title', title='Title')
    description: str | None = Field(
        None, description='Event description', title='Description'
    )
    nutshell: str | None = Field(None, description='Brief summary', title='Nutshell')
    event_category: EventCategory = Field(..., description='Event category')
    event_type: EventType = Field(..., description='Event type')
    importance: int | None = Field(
        None, description='Importance level (1-4)', title='Importance'
    )
    start_day: int | None = Field(
        None, description='Start day from planting', title='Start Day'
    )
    end_day: int | None = Field(
        None, description='End day from planting', title='End Day'
    )
    video_url: str | None = Field(None, description='Video URL', title='Video Url')
    translated: bool = Field(
        False, description='Is content translated', title='Translated'
    )
    image_list: dict[str, Any] | None = Field(
        None, description='Image information', title='Image List'
    )
    params: list[dict[str, Any]] | None = Field(
        None, description='Event parameters', title='Params'
    )
    farm_assets: list[str] | None = Field(
        None, description='Required farm assets', title='Farm Assets'
    )
    farm_classes: list[str] | None = Field(
        None, description='Farm classifications', title='Farm Classes'
    )
    farm_soils: list[str] | None = Field(
        None, description='Suitable soil types', title='Farm Soils'
    )
    farmer_experiences: list[str] | None = Field(
        None, description='Required farmer experience', title='Farmer Experiences'
    )
    farmer_groups: list[str] | None = Field(
        None, description='Target farmer groups', title='Farmer Groups'
    )
    weather_limitations: list[str] | None = Field(
        None, description='Weather limitations', title='Weather Limitations'
    )
    id: str = Field(..., title='Id')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class EventSearchResponse(BaseModel):
    events: list[EventRead] = Field(..., title='Events')
    total_count: int = Field(..., title='Total Count')
    search_filters: SearchFilters


class FarmContactCreate(BaseModel):
    farm_id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='ID of the farm', title='Farm Id'
    )
    contact_id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='ID of the contact', title='Contact Id'
    )
    role: FarmContactRole = Field(..., description='Role of the contact in the farm')


class FarmContactLink(BaseModel):
    contact_id: int = Field(
        ..., description='ID of the contact to link', title='Contact Id'
    )
    role: FarmContactRole = Field(..., description='Role of the contact in the farm')


class FarmCreate(BaseModel):
    farm_name: str = Field(..., description='The name of the farm', title='Farm Name')
    location: Location | None = Field(None, description='Location of the farm')
    contacts: list[FarmContactLink] | None = Field(
        None,
        description='List of contacts to link to the farm upon creation',
        title='Contacts',
    )


class FarmRead(BaseModel):
    farm_name: str = Field(..., description='The name of the farm', title='Farm Name')
    location: Location | None = Field(None, description='Location of the farm')
    id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='Unique identifier of the farm', title='Id'
    )
    contacts: list[ContactSummary] | None = Field(
        None, description='List of contacts associated with the farm', title='Contacts'
    )


class FarmSummary(BaseModel):
    farm_name: str = Field(..., description='The name of the farm', title='Farm Name')
    location: Location | None = Field(None, description='Location of the farm')
    id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='Unique identifier of the farm', title='Id'
    )
    role: FarmContactRole = Field(..., description="Contact's role on the farm")


class FarmUpdate(BaseModel):
    farm_name: str | None = Field(
        None, description='Updated name of the farm', title='Farm Name'
    )
    location: Location | None = Field(None, description='Updated location of the farm')


class HTTPValidationError(BaseModel):
    detail: list[ValidationError] | None = Field(None, title='Detail')


class MarketPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[MarketRead] | None = Field(
        None, description='List of markets in the current page', title='Items'
    )


class MarketPriceRead(BaseModel):
    price_date: date | None = Field(
        None, description='Date of the price record', title='Price Date'
    )
    supply_volume: float | None = Field(
        None, description='Volume of supply available', title='Supply Volume'
    )
    wholesale_price: float | None = Field(
        None, description='Wholesale price', title='Wholesale Price'
    )
    wholesale_unit: str | None = Field(
        None,
        description="Unit for wholesale price (e.g., 'kg', 'ton')",
        title='Wholesale Unit',
    )
    wholesale_ccy: str | None = Field(
        None, description='Currency code for wholesale price', title='Wholesale Ccy'
    )
    retail_price: float | None = Field(
        None, description='Retail price', title='Retail Price'
    )
    retail_unit: str | None = Field(
        None,
        description="Unit for retail price (e.g., 'kg', 'ton')",
        title='Retail Unit',
    )
    retail_ccy: str | None = Field(
        None, description='Currency code for retail price', title='Retail Ccy'
    )
    id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='Unique identifier of the market price', title='Id'
    )
    market: MarketRead = Field(..., description='Market information')
    commodity: CommodityRead = Field(..., description='Commodity information')


class NotePagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[NoteRead] | None = Field(
        None, description='List of notes in the current page', title='Items'
    )


class OrganizationPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[OrganizationRead] = Field([], title='Items')


class PathogenCreate(BaseModel):
    name: str = Field(..., description='Pathogen name', title='Name')
    name_en: str | None = Field(None, description='English name', title='Name En')
    scientific_name: str | None = Field(
        None, description='Scientific name', title='Scientific Name'
    )
    pathogen_class: PathogenClass = Field(..., description='Pathogen classification')
    severity: conint(ge=0, le=2) = Field(
        ..., description='Severity level (0-2)', title='Severity'
    )
    spread_risk: SpreadRisk = Field(..., description='Risk of spread')
    symptoms: str | None = Field(None, description='Disease symptoms', title='Symptoms')
    trigger: str | None = Field(None, description='Disease triggers', title='Trigger')
    chemical_treatment: str | None = Field(
        None, description='Chemical treatment options', title='Chemical Treatment'
    )
    alternative_treatment: str | None = Field(
        None, description='Alternative treatment options', title='Alternative Treatment'
    )
    preventive_measures: list[str] | None = Field(
        None, description='Preventive measures', title='Preventive Measures'
    )
    bullet_points: list[str] | None = Field(
        None, description='Key bullet points', title='Bullet Points'
    )
    default_image: str | None = Field(
        None, description='Default image filename', title='Default Image'
    )
    eppo: str | None = Field(None, description='EPPO code', title='Eppo')
    is_activated: bool = Field(
        True, description='Is pathogen activated', title='Is Activated'
    )
    translated: bool = Field(
        False, description='Is content translated', title='Translated'
    )
    version_number: int | None = Field(
        None, description='Version number', title='Version Number'
    )
    id: int = Field(..., description='Pathogen ID', title='Id')


class PathogenRead(BaseModel):
    name: str = Field(..., description='Pathogen name', title='Name')
    name_en: str | None = Field(None, description='English name', title='Name En')
    scientific_name: str | None = Field(
        None, description='Scientific name', title='Scientific Name'
    )
    pathogen_class: PathogenClass = Field(..., description='Pathogen classification')
    severity: conint(ge=0, le=2) = Field(
        ..., description='Severity level (0-2)', title='Severity'
    )
    spread_risk: SpreadRisk = Field(..., description='Risk of spread')
    symptoms: str | None = Field(None, description='Disease symptoms', title='Symptoms')
    trigger: str | None = Field(None, description='Disease triggers', title='Trigger')
    chemical_treatment: str | None = Field(
        None, description='Chemical treatment options', title='Chemical Treatment'
    )
    alternative_treatment: str | None = Field(
        None, description='Alternative treatment options', title='Alternative Treatment'
    )
    preventive_measures: list[str] | None = Field(
        None, description='Preventive measures', title='Preventive Measures'
    )
    bullet_points: list[str] | None = Field(
        None, description='Key bullet points', title='Bullet Points'
    )
    default_image: str | None = Field(
        None, description='Default image filename', title='Default Image'
    )
    eppo: str | None = Field(None, description='EPPO code', title='Eppo')
    is_activated: bool = Field(
        True, description='Is pathogen activated', title='Is Activated'
    )
    translated: bool = Field(
        False, description='Is content translated', title='Translated'
    )
    version_number: int | None = Field(
        None, description='Version number', title='Version Number'
    )
    id: int = Field(..., title='Id')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')
    images: list[PathogenImageRead] | None = Field(None, title='Images')


class PathogenSearchResponse(BaseModel):
    pathogens: list[PathogenRead] = Field(..., title='Pathogens')
    total_count: int = Field(..., title='Total Count')
    search_filters: SearchFilters


class PathogenUpdate(BaseModel):
    name: str | None = Field(None, title='Name')
    name_en: str | None = Field(None, title='Name En')
    scientific_name: str | None = Field(None, title='Scientific Name')
    pathogen_class: PathogenClass | None = None
    severity: conint(ge=0, le=2) | None = Field(None, title='Severity')
    spread_risk: SpreadRisk | None = None
    symptoms: str | None = Field(None, title='Symptoms')
    trigger: str | None = Field(None, title='Trigger')
    chemical_treatment: str | None = Field(None, title='Chemical Treatment')
    alternative_treatment: str | None = Field(None, title='Alternative Treatment')
    preventive_measures: list[str] | None = Field(None, title='Preventive Measures')
    bullet_points: list[str] | None = Field(None, title='Bullet Points')
    default_image: str | None = Field(None, title='Default Image')
    eppo: str | None = Field(None, title='Eppo')
    is_activated: bool | None = Field(None, title='Is Activated')
    translated: bool | None = Field(None, title='Translated')
    version_number: int | None = Field(None, title='Version Number')


class ProductPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[ProductRead] = Field([], title='Items')


class CommodityPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[CommodityRead] | None = Field(
        None, description='List of commodities in the current page', title='Items'
    )


class CommodityPriceSnapshot(BaseModel):
    commodity: CommodityRead = Field(..., description='Commodity information')
    price_date: list[date] = Field(
        ..., description='List of price dates', title='Price Date'
    )
    supply_volume: list[float | None] = Field(
        ..., description='List of supply volumes', title='Supply Volume'
    )
    retail_price: list[float | None] = Field(
        ..., description='List of retail prices', title='Retail Price'
    )
    retail_unit: str | None = Field(
        None,
        description='Unit for retail price (consistent across dates)',
        title='Retail Unit',
    )
    retail_ccy: str | None = Field(
        None,
        description='Currency for retail price (consistent across dates)',
        title='Retail Ccy',
    )


class ContactRead(BaseModel):
    preferred_form_of_address: str | None = Field(
        None,
        description='Preferred form of address of the contact',
        title='Preferred Form Of Address',
    )
    gender: Gender | None = Field(None, description="Contact's gender")
    date_of_birth: date | None = Field(
        None, description="Contact's date of birth", title='Date Of Birth'
    )
    estimated_age: int | None = Field(
        None, description="Contact's estimated age", title='Estimated Age'
    )
    role: ContactRole | None = Field(None, description='Role of the contact')
    experience: int | None = Field(
        None, description="Contact's work experience in years", title='Experience'
    )
    email: str | None = Field(
        None, description="Contact's email address", title='Email'
    )
    product_interests: ProductInterests | None = Field(
        None,
        description='The crops, livestock and other farm products that the contact is interested in',
    )
    id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='Unique identifier of the contact', title='Id'
    )
    name: str = Field(..., description='The WhatsApp name of the contact', title='Name')
    phone_number: str = Field(
        ..., description="Contact's phone number", title='Phone Number'
    )
    organization: OrganizationRead = Field(
        ..., description='The organization the contact belongs to'
    )
    farms: list[FarmSummary] | None = Field(
        None, description='List of farms associated with the contact', title='Farms'
    )


class CropPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[CropRead] | None = Field(None, title='Items')


class EventPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[EventRead] | None = Field(None, title='Items')


class FarmContactRead(BaseModel):
    farm_id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='ID of the farm', title='Farm Id'
    )
    contact_id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='ID of the contact', title='Contact Id'
    )
    role: FarmContactRole = Field(..., description='Role of the contact in the farm')
    id: conint(lt=2147483647, gt=0) | None = Field(
        None,
        description='Unique identifier of the farm contact association',
        title='Id',
    )
    contact: ContactRead = Field(..., description='Contact details')


class FarmPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[FarmRead] | None = Field(
        None, description='List of farms in the current page', title='Items'
    )


class MarketPricePagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[MarketPriceRead] | None = Field(
        None, description='List of market prices in the current page', title='Items'
    )


class MarketSnapshotRead(BaseModel):
    market: MarketRead = Field(..., description='Market information')
    latest_prices: list[CommodityPriceSnapshot] = Field(
        ...,
        description='Latest prices for each commodity in the market (last 3 months)',
        title='Latest Prices',
    )


class PathogenPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[PathogenRead] | None = Field(None, title='Items')


class ContactPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[ContactRead] | None = Field(
        None, description='List of contacts in the current page', title='Items'
    )


class FarmContactPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[FarmContactRead] | None = Field(
        None, description='List of farm contacts in the current page', title='Items'
    )

def to_dict(self):
    return self.model_dump(mode='json')

BaseModel.to_dict = to_dict

