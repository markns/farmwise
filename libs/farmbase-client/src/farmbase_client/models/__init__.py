# generated by datamodel-codegen:
#   filename:  http://0.0.0.0:8000/api/v1/docs/openapi.json
#   timestamp: 2025-05-14T08:21:05+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any

from pydantic import BaseModel, EmailStr, Field, conint, constr


class AdminPasswordReset(BaseModel):
    new_password: str = Field(..., title='New Password')


class AgentBase(BaseModel):
    name: str = Field(..., title='Name')


class AgentRead(BaseModel):
    name: str = Field(..., title='Name')
    id: int = Field(..., title='Id')


class ChatState(BaseModel):
    last_agent: AgentRead | None = None
    input_list: list[dict[str, Any]] | None = Field(None, title='Input List')


class CropVarietyResponse(BaseModel):
    variety: str = Field(..., title='Variety')
    description: str = Field(..., title='Description')
    max_yield: str = Field(..., title='Max Yield')


class ErrorMessage(BaseModel):
    msg: str = Field(..., title='Msg')


class ErrorResponse(BaseModel):
    detail: list[ErrorMessage] | None = Field(..., title='Detail')


class Location(BaseModel):
    latitude: float = Field(
        ..., description='Latitude in decimal degrees (-90 to 90)', title='Latitude'
    )
    longitude: float = Field(
        ..., description='Longitude in decimal degrees (-180 to 180)', title='Longitude'
    )


class ModelResponseCreate(BaseModel):
    response_id: str = Field(..., title='Response Id')
    output: Any = Field(..., title='Output')
    usage: dict[str, Any] | None = Field(None, title='Usage')


class OrganizationCreate(BaseModel):
    name: str = Field(..., title='Name')
    description: str | None = Field(None, title='Description')
    default: bool | None = Field(False, title='Default')
    banner_enabled: bool | None = Field(False, title='Banner Enabled')
    banner_color: str | None = Field(None, title='Banner Color')
    banner_text: str | None = Field(None, title='Banner Text')


class OrganizationRead(BaseModel):
    name: str = Field(..., title='Name')
    description: str | None = Field(None, title='Description')
    default: bool | None = Field(False, title='Default')
    banner_enabled: bool | None = Field(False, title='Banner Enabled')
    banner_color: str | None = Field(None, title='Banner Color')
    banner_text: str | None = Field(None, title='Banner Text')
    id: conint(lt=2147483647, gt=0) | None = Field(None, title='Id')
    slug: constr(pattern=r'^[\w]+(?:_[\w]+)*$', min_length=3) | None = Field(
        ..., title='Slug'
    )


class OrganizationUpdate(BaseModel):
    description: str | None = Field(None, title='Description')
    default: bool | None = Field(False, title='Default')
    banner_enabled: bool | None = Field(False, title='Banner Enabled')
    banner_color: str | None = Field(None, title='Banner Color')
    banner_text: str | None = Field(None, title='Banner Text')


class ProjectCreate(BaseModel):
    name: str = Field(..., title='Name')
    display_name: str | None = Field('', title='Display Name')
    description: str | None = Field(None, title='Description')
    default: bool = Field(False, title='Default')
    enabled: bool | None = Field(True, title='Enabled')
    organization: OrganizationRead


class ProjectRead(BaseModel):
    name: str = Field(..., title='Name')
    display_name: str | None = Field('', title='Display Name')
    description: str | None = Field(None, title='Description')
    default: bool = Field(False, title='Default')
    enabled: bool | None = Field(True, title='Enabled')
    id: conint(lt=2147483647, gt=0) | None = Field(None, title='Id')


class ProjectUpdate(BaseModel):
    name: str = Field(..., title='Name')
    display_name: str | None = Field('', title='Display Name')
    description: str | None = Field(None, title='Description')
    default: bool = Field(False, title='Default')
    enabled: bool | None = Field(True, title='Enabled')


class RunItemBase(BaseModel):
    type: str = Field(..., title='Type')
    agent_id: int | None = Field(None, title='Agent Id')
    raw_item: dict[str, Any] = Field(..., title='Raw Item')


class RunResultCreate(BaseModel):
    contact_id: int = Field(..., title='Contact Id')
    input: Any = Field(..., title='Input')
    created_at: datetime = Field(..., title='Created At')
    final_output: Any = Field(None, title='Final Output')
    input_guardrails: dict[str, Any] | None = Field(None, title='Input Guardrails')
    output_guardrails: dict[str, Any] | None = Field(None, title='Output Guardrails')
    last_agent: AgentBase | None = None
    input_list: list[dict[str, Any]] = Field(..., title='Input List')
    raw_responses: list[ModelResponseCreate] | None = Field(None, title='Raw Responses')
    new_items: list[RunItemBase] | None = Field(None, title='New Items')
    trace_id: str = Field(..., title='Trace Id')


class SuitabilityIndexResponse(BaseModel):
    suitability_index: dict[str, int] = Field(..., title='Suitability Index')


class UserOrganization(BaseModel):
    organization: OrganizationRead
    default: bool | None = Field(False, title='Default')
    role: str | None = Field(None, title='Role')


class UserPasswordUpdate(BaseModel):
    current_password: str = Field(..., title='Current Password')
    new_password: str = Field(..., title='New Password')


class UserProject(BaseModel):
    project: ProjectRead
    default: bool | None = Field(False, title='Default')
    role: str | None = Field(None, title='Role')


class UserRead(BaseModel):
    email: EmailStr = Field(..., title='Email')
    projects: list[UserProject] | None = Field([], title='Projects')
    organizations: list[UserOrganization] | None = Field([], title='Organizations')
    id: conint(lt=2147483647, gt=0) | None = Field(None, title='Id')
    role: str | None = Field(None, title='Role')


class UserRegister(BaseModel):
    email: EmailStr = Field(..., title='Email')
    projects: list[UserProject] | None = Field([], title='Projects')
    organizations: list[UserOrganization] | None = Field([], title='Organizations')
    password: str | None = Field(None, title='Password')


class UserRegisterResponse(BaseModel):
    token: str | None = Field(None, title='Token')


class UserUpdate(BaseModel):
    projects: list[UserProject] | None = Field(..., title='Projects')
    organizations: list[UserOrganization] | None = Field(..., title='Organizations')
    role: str | None = Field(None, title='Role')


class ValidationError(BaseModel):
    loc: list[str | int] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class ContactCreate(BaseModel):
    name: str = Field(..., description='The full name of the contact', title='Name')
    location: Location | None = Field(
        None, description="Contact's geographical location"
    )
    phone_number: str = Field(
        ..., description="Contact's phone number", title='Phone Number'
    )


class ContactPatch(BaseModel):
    name: str | None = Field(
        None, description='Updated name of the contact', title='Name'
    )
    location: Location | None = Field(
        None, description="Contact's geographical location"
    )


class ContactRead(BaseModel):
    name: str = Field(..., description='The full name of the contact', title='Name')
    location: Location | None = Field(
        None, description="Contact's geographical location"
    )
    id: conint(lt=2147483647, gt=0) | None = Field(
        None, description='Unique identifier of the contact', title='Id'
    )
    phone_number: str = Field(
        ..., description="Contact's phone number", title='Phone Number'
    )
    created_at: datetime = Field(
        ..., description='Timestamp when the contact was created', title='Created At'
    )
    updated_at: datetime = Field(
        ...,
        description='Timestamp when the contact was last updated',
        title='Updated At',
    )


class CropVarietiesResponse(BaseModel):
    crop: str = Field(..., title='Crop')
    varieties: list[CropVarietyResponse] = Field(..., title='Varieties')


class HTTPValidationError(BaseModel):
    detail: list[ValidationError] | None = Field(None, title='Detail')


class OrganizationPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[OrganizationRead] = Field([], title='Items')


class ProjectPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[ProjectRead] = Field([], title='Items')


class UserCreate(BaseModel):
    email: EmailStr = Field(..., title='Email')
    password: str | None = Field(None, title='Password')
    projects: list[UserProject] | None = Field(..., title='Projects')
    organizations: list[UserOrganization] | None = Field(..., title='Organizations')
    role: str | None = Field(None, title='Role')


class UserLogin(BaseModel):
    email: EmailStr = Field(..., title='Email')
    projects: list[UserProject] | None = Field([], title='Projects')
    organizations: list[UserOrganization] | None = Field([], title='Organizations')
    password: str = Field(..., title='Password')


class UserLoginResponse(BaseModel):
    projects: list[UserProject] | None = Field(..., title='Projects')
    token: str | None = Field(None, title='Token')


class UserPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[UserRead] = Field([], title='Items')


class ContactPagination(BaseModel):
    items_per_page: int = Field(..., title='Items Per Page')
    page: int = Field(..., title='Page')
    total: int = Field(..., title='Total')
    items: list[ContactRead] | None = Field(
        None, description='List of contacts in the current page', title='Items'
    )

def to_dict(self):
    return self.model_dump(mode='json')

BaseModel.to_dict = to_dict

