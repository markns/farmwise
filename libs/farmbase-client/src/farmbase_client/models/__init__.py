# generated by datamodel-codegen:
#   filename:  http://0.0.0.0:8000/api/v1/openapi.json
#   timestamp: 2025-03-20T13:20:00+00:00

from __future__ import annotations

from typing import Literal
from uuid import UUID

from geojson_pydantic import LineString, Polygon
from pydantic import BaseModel, EmailStr, Field, RootModel, constr


class FarmCreate(BaseModel):
    name: constr(max_length=255) = Field(..., title='Name')
    location: constr(max_length=255) | None = Field(None, title='Location')


class FarmPublic(BaseModel):
    name: constr(max_length=255) = Field(..., title='Name')
    location: constr(max_length=255) | None = Field(None, title='Location')
    id: UUID = Field(..., title='Id')
    owner_id: UUID = Field(..., title='Owner Id')


class FarmUpdate(BaseModel):
    name: constr(min_length=1, max_length=255) | None = Field(None, title='Name')
    location: constr(max_length=255) | None = Field(None, title='Location')


class FarmsPublic(BaseModel):
    data: list[FarmPublic] = Field(..., title='Data')
    count: int = Field(..., title='Count')


class FieldUpdate(BaseModel):
    name: constr(min_length=1, max_length=255) | None = Field(None, title='Name')


class ItemCreate(BaseModel):
    title: constr(min_length=1, max_length=255) = Field(..., title='Title')
    description: constr(max_length=255) | None = Field(None, title='Description')


class ItemPublic(BaseModel):
    title: constr(min_length=1, max_length=255) = Field(..., title='Title')
    description: constr(max_length=255) | None = Field(None, title='Description')
    id: UUID = Field(..., title='Id')
    owner_id: UUID = Field(..., title='Owner Id')


class ItemUpdate(BaseModel):
    title: constr(min_length=1, max_length=255) | None = Field(None, title='Title')
    description: constr(max_length=255) | None = Field(None, title='Description')


class ItemsPublic(BaseModel):
    data: list[ItemPublic] = Field(..., title='Data')
    count: int = Field(..., title='Count')


class Message(BaseModel):
    message: str = Field(..., title='Message')


class PrivateUserCreate(BaseModel):
    email: str = Field(..., title='Email')
    password: str = Field(..., title='Password')
    full_name: str = Field(..., title='Full Name')
    is_verified: bool = Field(False, title='Is Verified')


class UserPublic(BaseModel):
    email: EmailStr = Field(..., title='Email')
    is_active: bool = Field(True, title='Is Active')
    is_superuser: bool = Field(False, title='Is Superuser')
    full_name: constr(max_length=255) | None = Field(None, title='Full Name')
    id: UUID = Field(..., title='Id')


class UsersPublic(BaseModel):
    data: list[UserPublic] = Field(..., title='Data')
    count: int = Field(..., title='Count')


class ValidationError(BaseModel):
    loc: list[str | int] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class HTTPValidationError(BaseModel):
    detail: list[ValidationError] | None = Field(None, title='Detail')


class FieldCreate(BaseModel):
    name: constr(max_length=255) = Field(..., title='Name')
    boundary: LineString | None = None


class FieldPublic(BaseModel):
    name: constr(max_length=255) = Field(..., title='Name')
    id: UUID = Field(..., title='Id')
    farm_id: UUID = Field(..., title='Farm Id')
    boundary: Polygon | None = None
    area: float | str | None = Field(None, title='Area')


class FieldsPublic(BaseModel):
    data: list[FieldPublic] = Field(..., title='Data')
    count: int = Field(..., title='Count')

def to_dict(self):
    return self.model_dump()

BaseModel.to_dict = to_dict

