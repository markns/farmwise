#!/usr/bin/env bash

set -e

# Note run this from the project root directory!
# ❯ libs/farmbase-client/gen-client.sh

# Use the openapi-python-client generator to generate the client, but replace the models
# with pydantic models generated by datamodel-code-generator.
# https://github.com/openapi-generators/openapi-python-client/discussions/1049

OUTPUT=libs/farmbase-client/src/farmbase_client
OPENAPI_URL=http://0.0.0.0:8000/api/v1/openapi.json
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

uvx --from git+https://github.com/openapi-generators/openapi-python-client \
  openapi-python-client generate --url $OPENAPI_URL --meta none \
  --custom-template-path=$SCRIPT_DIR/templates \
  --config $SCRIPT_DIR/gen-client-config.yaml \
  --output-path $OUTPUT --overwrite

rm -r $OUTPUT/models/*

uvx --from git+https://github.com/koxudaxi/datamodel-code-generator[http] \
  datamodel-codegen --url $OPENAPI_URL \
  --output-model-type pydantic_v2.BaseModel \
  --strict-nullable --snake-case-field --capitalize-enum-members \
  --use-union-operator --use-standard-collections \
  --additional-imports "geojson_pydantic.Feature" \
  > $OUTPUT/models/__init__.py

# Remove the generated GeoJSON classes as we rely on geojson_pydantic

MODELS=libs/farmbase-client/src/farmbase_client/models/__init__.py
for geojson_class in Geometries Point MultiPoint LineString MultiLineString Polygon \
                     MultiPolygon GeometryCollection Position2D Position3D Feature; do
awk -v pat="class $geojson_class" '
  $0 ~ pat { deleting=1 }
  deleting && /^$/ { blank++ }
  deleting && blank == 2 { deleting=0; blank=0; next }
  !deleting
  '  $MODELS > /tmp/models_123 && mv /tmp/models_123 $MODELS
done

sed -i '' '/model_rebuild/d' $MODELS

# Monkey patch the BaseModel to return model_dump() when calling to_dict()
# as this is used by the generated client

cat << EOF >> $OUTPUT/models/__init__.py

def to_dict(self):
    return self.model_dump()

BaseModel.to_dict = to_dict

EOF

